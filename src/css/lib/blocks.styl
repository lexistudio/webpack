// == block
//
// Реализует минимальную систему классов для построения макетов, в том числе
// основанных на типографских сетках.
//
// Базовая реализация: http://arnaudleray.github.io/pocketgrid/[PocketGrid].
//
// Зависимости:
//
// -----------------------------------------------------------------------------
@require 'css3'                                                         // <1>
@require 'clearfix'                                                     // <2>
@require 'size'                                                         // <3>
// -----------------------------------------------------------------------------
//
// <1> `box-sizing()`
// <2> `clearfix()`
// <3> `size-vertical()`
//
//
// === use-blocks()
//
// Использование:
//
// -----------------------------------------------------------------------------
// use-blocks()                                                         // <1>
// -----------------------------------------------------------------------------
//
// <1> определяет классы системы блоков.
//
// Модуль определяет два класса:
//
// - `block-group` — группа блоков, используемая как контейнер
// - `block` — собственно, контентный блок
//
// В терминологии сеток `block-group` соответствует сетке или ряду сетки,
// `block` — ячейке сетки.
//
// Реализация:
//
// -----------------------------------------------------------------------------
use-blocks()
  +media(any)
    .block-group
    .block
    .block-group:after
    .block:after
    .block-group:before
    .block:before
      box-sizing: border-box                                            // <1>

    .block-group
      list-style-type: none                                             // <2>
      padding: 0
      margin:  0
      clearfix: true

    .block-group > .block-group                                         // <3>
      clear: none
      float: left
      margin: 0 !important

    .block
      float: left
      width: 100%                                                       // <4>
// -----------------------------------------------------------------------------
//
// <1> модуль использует `box-sizing: border-box`, работает в IE>8. Для IE7
//     необходимо использовать polyfill.
//
// <2> если контейнер является списком, на всякий случай сбрасываем стилизацию
//     списка.
//
// <3> допускается вложение контейнера непосредственно в другой контейнер
//     при условии, что контейнер не использует отступы.
//
// <4> по умолчанию все блоки имеют ширину 100% (mobile first).
//
//
// === block-gutter()
//
// Макрос `block-gutter` позволяет установить промежуток между блоками группы
// блоков.
//
// Использование:
//
// -----------------------------------------------------------------------------
//
// .layout.block-group
//   block-gutter: 20px                                                 // <1>
//
//  .showcase.block-group
//    block-gutter: 20px, 2                                             // <2>
//
//  .showcase--aligned.block-group
//    block-gutter: 20px, 2, left                                       // <3>
//
// -----------------------------------------------------------------------------
//
// <1> горизонтальный отступ 20px.
// <2> горизонтальный отступ 20px, вертикальный — 2 текстовых линии.
// <3> аналогично, но с выравниванием отступов влево (может решить проблему
//     горизонтального скроллинга, если она возникает).
//
// По умолчанию используется центральное выравнивание блоков, т.н. общий отступ
// между блоками формируется половинными внутренними отступами блоков с каждой
// стороны.
//
// При вызове можно указать горизонтальный и вертикальный отступы.
//
// Реализация:
//
// -----------------------------------------------------------------------------
blocks-gutter(horizontal = 0, vertical = 0, align = center)
  -blocks-gutter-group(horizontal, vertical, align)
  & > .block
    -blocks-gutter-block(horizontal, vertical, align)

-blocks-gutter-group(horizontal, vertical, align)                      // <1>
  vertical = size-vertical(vertical)
  if horizontal > 0
    if align == center
      margin-left:  ( 0 - horizontal/2 )
      margin-right: ( 0 - horizontal/2 )
    if align == left
      margin-left:  ( 0 - horizontal )
      margin-right: 0
  if vertical > 0
    if align == center
      margin-top:    ( 0 - vertical/2 )
      margin-bottom: ( 0 - vertical/2 )
    if align == left
      margin-top:    ( 0 - vertical)
      margin-bottom: 0

-blocks-gutter-block(horizontal, vertical, align)                      // <2>
  vertical = size-vertical(vertical)
  if horizontal > 0
    if align == center
      padding-left:  ( horizontal/2 )
      padding-right: ( horizontal/2 )
    if align == left
      padding-left:  horizontal
      padding-right: 0
  if vertical > 0
    if align == center
      padding-top:    ( vertical/2 )
      padding-bottom: ( vertical/2 )
    if align == left
      padding-top:    vertical
      padding-bottom: 0
// -----------------------------------------------------------------------------
//
// <1> вспомогательный макрос для отступов контейнера блоков
// <2> вспомогательный макрос для внутренних отступов блока
//
//
// === blocks-break()
//
// Выводит блок в новом ряду.
//
// Использование:
//
// -----------------------------------------------------------------------------
// .showcase-item.block:nth-child(3n+1)
//    blocks-break: true                                              // <1>
// -----------------------------------------------------------------------------
//
// <1> Выводим по 3 блока.
//
// Реализация:
//
// -----------------------------------------------------------------------------
blocks-break(enabled = true)
  if enabled
    clear: left
// -----------------------------------------------------------------------------
//
//
// === blocks-offset-left()
//
// Задает левый отступ для блока. Имеет смысл использовать, если необходимо
// пропустить колонку.
//
// Использование:
//
// -----------------------------------------------------------------------------
// .notes.block
//   blocks-offset-left: 30%
// -----------------------------------------------------------------------------
//
// Реализация:
//
// -----------------------------------------------------------------------------
blocks-offset-left(offset)
  margin-left: offset !important
// -----------------------------------------------------------------------------
//
// === blocks-offset-right()
//
// Задает правый отступ для блока. Аналогичен `blocks-offset-left()`.
//
// Реализация:
//
// -----------------------------------------------------------------------------
blocks-offset-right(offset)
  margin-right: offset !important
// -----------------------------------------------------------------------------
//
// === blocks-columns()
//
// Задает ширину колонок группы блоков исходя из количества одинаковых колонок.
// Дополнительно можно указать размер гооризонтального и вертикального отступов.
//
// Использование:
//
// -----------------------------------------------------------------------------
// .showcase.block-group                                                // <1>
//   blocks-columns: 4, 20px, 2                                         // <2>
// -----------------------------------------------------------------------------
//
// <1> применяется к группе блоков
// <2> 4 одинаковых колонки, горизонтальный отступ 20px, вертикальный 2 линии
//
// -----------------------------------------------------------------------------
blocks-columns(cols, gutter-horizontal = 0, gutter-vertical = 0, align = center)
  & > .block
    width: (100%/cols)
  & > .block:nth-child({cols}n+1)
    clear:left
    blocks-gutter(gutter-horizontal, gutter-vertical, align)
// -----------------------------------------------------------------------------
//
